Descrição de um bocado da UI. Componente é uma função que resulta em elementos de React (escritos em JSX). É como uma planta ou um template que é usado em Component instances.

Intances são criadas quando se usa os componentes, é a manifestação de um componente (que tem os próprios States e Props).

Cada Component Instance resulta em um ou mais elementos de React (React Elements). JSX -> React.createElement() -> React Element (resultado de usar um componente no nosso código).
Contém a informação necessária para criar elementos DOM.

Elementos DOM são a representação final das instances no browser.

Os React Elements NÃO são rendered (renderizados) no DOM, estes só existem na React APP e são apenas convertidos em elementos DOM quando são "pintados" no ecrã neste último passo.

------------

A Symbol cannot come from an API call, they cannot be transmited via JSON.

------------
126.

State changes trigger renders. >
React calls component functions and figures out how DOM should be updated. >
RENDER PHASE: Rendering is NOT updating the DOM (or displaying elements on the screen). Rendering only happens internally inside React, it does not produce visual changes. >
COMMIT PHASE: React actually writes to the DOM (update, insert, delete elements). >
Browser paint.

[1] Render is triggered
#1: Initial render of the app
#2: State is updated (re-render)

>> The render process is triggered for the entire app.
(In practice, it looks like React only re-renders the component where the state updated.)

------------
127. The Render Phase

NOT TRUE #1: Rendering is updating the screen/DOM (FALSE)
NOT TRUE #2: React completely discards old view (DOM) on re-render (FALSE)

><><><><><><

React takes the Component instances that triggered re-render to render them (call corresponding component functions) > Creates updated React elements >
Make up the "virtual DOM"

1. Initial Render: whole component tree and transform into a REACT ELEMENT TREE ("virtual DOM")
- Virtual DOM: a tree of all React elements created from all instances in the component tree.
- Cheap and fast to create multiple trees.
- Nothing to do with "shadow DOM"

2. Re-Renders: if a component's state is updated, React creates a new React element tree, a new virtual DOM.
- Rendering a component will cause all of its child components to be rendered as well (even props changed or not). > Necessary because React doesn't know wheter children will be affected.

It's not the entire DOM that gets updated, only the virtual DOM.

The new Virtual DOM will be reconciled with the current Fiber (reconciler) tree (that exists before the state update) > Updated Fiber tree that will be output to the DOM.

Why not update the entier DOM on state changes?
- NOT cheap and fast. Inefficient and wasteful: writing to the DOM is SLOW.
- Only a small part of the DOM needs to be updated.
- React reuses as much of the existing DOM as possible. How? >
Reconciliation: Deciding which DOM elements actually need to be inserted, deleted, or updated, in order to reflect the latest state changes.
(Fiber is the "engine or React"). Due to this reconciler, we never touch the DOM directly.

In the initial render, Fiber takes the entire React Element Tree (Virtual DOM) and turns into Fiber Tree. For each component instance and DOM element in the app, there is a "fiber". Fibers are NOT re-created on every render, they are created on the initial render, it's simply mutated on future reconciliation steps. Keeps track of current state, props, side effects, used hooks... Also contains a queue of work. Instead of a parent/child relationship, each first child has a link to its parent and all the other children have a link to the previous sibling. Fiber ("Unit of work"): Work can be performed asynchronously. This means rendering can be split into chunks, tasks can have prioritizations and work can be paused, reused, or thrown away. Pause/resume work helps not blocking JS engine.

Fiber walks through the entire step by step and analyzes what needs to change the current Fiber tree and the new Fiber tree based on the new Virtual DOM. This analysis is called Diffing. When the process is over, all the DOM mutations are place on a list called the list of effects, which will be used on the commit phase to mutate the DOM.

------------
128. The Commit Phase
> React goes through the effect list and writes to the DOM: insertions, deletions, and updates. Commiting is synchronous, the DOM is updated in one go, can't be interrupted. Important so that the DOM never shows partial results, ensuring a consistent UI. The workInProgress fiber tree becomes the current tree. The library that ensures the commiting is the ReactDOM ("renderer"), React is not responsible with touching the DOM.

> Browser paint: Updated UI on the screen when the DOM changes.

RECAP:

1. Trigger: Only happens on initial render and state updates
2. Render phase: Updated React Elements > New Virtual DOM + Current Fiber tree > Reconciliation (Reuse as much of the DOM as possible, by finding the smallets number of DOM updates that reflect the latest state update on the screen)  + Diffing (step by step compares the elements in the new virtual DOM with the elements of the current fiber tree, to see what changed) > Updated Fibre tree > List of DOM updates
3. Commit phase: Updated DOM
4. Browser paint: Updated UI on screen

------------
129. Diffing
Two fundamental assumptions:
[1]: Two elements of different types will produce different trees.
[2]: Elements with a stable key prop will stay the same across renders.

Two different situations that need to be considered:
1. Same position, different element:
-Changing the type of an element (div to header). React assumes the entire sub-tree is no longer valid. Old components are destroyed and removed from DOM, including state. Resets state. Same situation for React elements (component instance).

2. Same position, same element
-If after a render, at a certain positon in the tree, a DOM element or React element (component instance) remains the same as before, the element will be kept in the DOM, including state. Props can change, but not the type. New props/attributes are passed if they changed between renders, but the element remains the same. 

------------
131. The Key Prop
- Special prop we use to tell the diffing algorithm that an element is unique
- Allows React to distinguish between multiple instances of the same component type
- When a key stays the same across render, the element will be kept in the DOM (even if the position in the tree changes)
  > Using keys in lists
- When a key changes between renders, the element will be destroyed and a new one will be created (even if the position in the tree is the same as before)
  > Using keys to reset state

ALWAYS USE KEYS!

------------
134. Rules for Render Logic: Pure Components

1. RENDER LOGIC
  Code that lives at the top level of the component function. Describes exactly how the component will be displayed on the screen. Can be found inside functions. Render logic is all the code that is executed as soon as the component is rendered.

2. EVENT HANDLER FUNCTIONS
  Executed as a consequence of the event that the handler is listening to. Code that changes and manipulates the application.

REFRESHER
>>>>>>>>>
Side effect: dependency on or modification of any data outsite the function scope.
Pure function: a function that has no side effects. Does not change any variable outside its scope and given the same input, returns the same output.
Impure function: unpredictable outputs (for example, with dates).
<<<<<<<<<<

When it comes to render logic, components must be pure: given the same props, a component should always return the same JSX.
Render logic must produce no side effects: no interactions with the "outside world" of its scope. It must not:
  - Perform network requests (API calls)
  - Start timers
  - Directly use the DOM API
  - Mutate objects or variables outsite of the function scope
  - Update state (or refs): this will create an infinite loop

Side effects are allows (and encouraged) in event handler functions!
>>>useEffect hook

------------
135. State Update Batching

All pieces of state are updated in one go (batched) > React will trigger one single render + commit > Performance optimization, no wasted renders

Updated state variables are not immediately available after setState call, but only after the re-render. This also applies when only one state variable is updated.

------------
139. Section Summary: Practical Takeaways

Component is a blueprint for a piece of UI that will exist on the screen. When we use a component, React creates a component instance (will have props, state and more). A cmponent instance when renderes, will return a React Element.

Rendering means calling component functions and calculating what DOM elements need to be inserted, deleted or updated. Nothing to do with writing to the DOM. Each time a component instance is rendered and re-rendered, the function is called again.

Only initial app render and state updates can cause a render (happens for the entire application). When a component instance gets re-rendered, all its children will get re-rendered as well.

Diffing is how React decides which DOM elements need to be added or modified. If a certain React element stays at the same position in the element tree, the corresponding DOM element and component state will stay the same. If the element changed to a different position, or if it's a different element type, the DOM element and state will be destroyed (reset).

We can influende the diffing algorithm by giving element a key prop. If a key stays the same across renders, the element is kept in the DOM. When we change keys between renders, the DOM element will be destroyed and rebuilt. We use this trick to reset state.

Never declare a new component inside another component. Always declare new components at the top level of a file.

The logic that produces JSX output for a component instance (render logic) is not allowed to produce any side effects. Side effects are allowed in event handlers and useEffect.

The DOM is updated in the commit phase, not by React, but by a "renderer" called ReactDOM.

Multiple state updates inside an event handler function are batched, they all happen at once, causing only one re-render. This means we can not access a state variable immediately after updating it.

When using events in event handlers, we get access to a synthetic event object, so that events work the same way across all browsers.

React is a library, not a framework. This means we can assemble your app using your favorite third-party libraries. The downside is you need to find and learn all these additional libraries.