160. React Hooks and Their Rules

- React hooks are special functions that are built into React and allow us to hook into React's internal mechanisms:
  -> Creating and accessing state from the Fiber tree
  -> Registering side effects in the Fiber tree
  -> Manual DOM selections
  -> Many more.
- Always start with 'use' (useState, useEffect, etc.)
- Enable easy reusing of non-visual logic: we can compose multiple hooks into our own custom hooks
- Give funciton components the ability to own state and run side effects at different lifecycle points (before v16.8 only available in class components)

OVERVIEW of all built-in hooks (as of React v18.x):
(> Learned)
(- Will learn)
(Will not learn)

Most used hooks:
> useState
> useEffect
- useReducer
- useContext

Less used hooks:
- useRef
- useCallback
- useMemo
- useTransition
- useDeferredValue
useLayoutEffect
useDebugValue
useImperativeHandle
useId

Only for libraries:
useSyncExternalStore
useInsertionEffect

THE RULES OF HOOKS
1. Can only be called at the top level:
  > Do NOT call hooks inside contidionals, loops, nested functions, or after an early return
  > This is necessary to ensure that hooks are called in the same order (hooks rely on this)
2. Only call hooks from React functions:
  > Only call hooks inside a function component or a custom hooks
(These rules are automatically enforced by React's ESLint rules)

HOOKS RELY ON CALL ORDER
React Element Tree --(on initial render)--> Fiber Tree ~~~> Fiber (Props .... List of Hooks)
  > A list of Hooks is built based on hooks call order. If a hooks is called inside a conditional and that condition changes, that hook will no longer exist on the list, the top hook on the list will point to an non existant hook and the linked list is broken, as there is no link to the following hooks after the removed hook. React won't be able to keep track of the list of hooks to call.
  > A linked list of hooks is necessary because it's the simplest way to identify hooks. The order in which the hook is called uniquely identifies the hook.

>:---------------------------------:<
164. useState Summary
1. Creating state
  > Simple
  > Based on a (call)function (lazy evaluation) (Only called in the initial render, must be pure and accept no arguments)

2. Update state
  > Simple
  > Based on the current state (setCount((current) => current + 1);)

>:---------------------------------:<
166. Introducing Another Hook: useRef
What is a Ref? It stands for reference and creates a "box" (object) with a mutable .current property that is persisted across renders.

Two big use cases:
  1. Creating a variable that stays the same between renders (e.g. previous state, setTimeout id, etc.)
  2. Selecting and storing DOM elements

Refs are for data that is NOT rendered: usually only appear in event handlers or effects, not in JSX (otherwise use state)

Do NOT write or read .current in render logic (like state)

> Persists across renders
> Updating does not cause re-renders
> Aren't immutable
> Updates are not asynchronous, we can read a new .current property immediately after updating it

>:---------------------------------:<
169. What are Custom Hooks? When to Create One?

There are 2 types of things that can be reused in React:

1. UI
  > Component

2. Logic
  > Does the logic contain any hooks?
    -- NO --> Regular function
    -- YES -> Custom hook

Custom hooks allow us to reuse non-visual logic (stateful logic) in multiple components. (Or any logic that contains one or more React hooks.)
One custom hook should have ONE purpose, to make it reusable and portable (even across multiple projects). Rules of hooks apply to custom hooks too.
It's a JS function, that unlike components, can receive and return any data (usually [] or {}).
Needs to use one or more hooks.
Function name needs to start with 'use'.

>:---------------------------------:<
189. Managing State With useReducer

State management with useState is not enough in certain situations:
  1. When components have a lot of state variables and state updates, spread across many event handlers all over the component.
  2. When multiple state updates need to happen at the same time (as a reaction to the same event, like "starting a game", set score to 0, set an isPlaying status and start a timer)
  3. When updating one piece of state depends on one or multiple other pieces of state

  In all these situations, useReducer can be of great help

  STATE WITH useReducer:
    const [state, dispatch] = useReducer(reducer, initialState);
    > An alternative way of setting state, ideal for complex state and related pieces of state
    > Stores related pieces of state in a state OBJECT that is returned from the useReducer hook
    useReducer needs [reducer:] function containing all logic to update state. Decouples state logic from component into a central place
    > [reducer:] pure function (no side effects!) that takes current state and action, and returns the next state
    > [action:] object that describes how to update state
    > [dispatch:] function to trigger state updates, by "sending" actions from event handlers to the reducer

>:---------------------------------:<
201. Section Summary: useState vs. useReducer

useState:
  > Ideal for single, independent pieces of state (numbers, strings, single arrays, etc.)
  > Logic to update state is places directly in event handlers or effects, spread all over one or multiple components
  > State is updated by calling setState (setter returned from useState)
  > Imperative state updates
  > Easy to understand and use

useReducer:
  > Ideal for multiple related pieces of state and complex state (e.g. object with many values and nested objects or arrays)
  > Logic to update state lives in one central place, decoupled from components: the reducer
  > State is updated by dispatching an action to a reducer
  > Declarative state updates: complex state transitions are mapped to actions
  > More difficult to understand and implement

When to use useReducer?:
  > Just one piece of state?
  -- YES --> useState
  -- NO ---> Do states frequently update together? -- YES --> Are you willing to implement slightly more complex code? -- NO ---> useState, -- YES --> useReducer
  -- NO ---> Over 3 or 4 pieces of related state, including objects? -- NO ---> Too many event handlers make components large of confusing? -- YES --> useReducer (-- NO --> useState)

>:---------------------------------:<
205. Routing and Single-Page Applications (SPAs)
  > With routing, we match different URLs to different UI views (React components): routes
  > This enables users to navigate between different applications screens, using the browser url
  > Keeps the UI in sync with the current browser URL
  > React routing --> ReactRouter
  > Allows us to build Single-Page Applications (SPA)

Single-Page Aplications (SPA)
  > Application that is executed entirely on the client (browsers)
  > Routes: different URLs correspond to different views (components)
  > JavaScript (React) is used to update the page (DOM)
  > *The page is never reloaded*
  > Feels like a native app

  1. User clicks router link
  2. URL is changed
  3. React component corresponding to the new URL is rendered

>:---------------------------------:<
208. Styling Options For React Applications
React is unopinionated in regards of many common aspects of building web apps.

> Styling:
  STYLING OPTION -> WHERE? -> HOW? -> SCOPE -> BASED ON
  1. Inline CSS -> JSX elements -> style prop -> JSX element (local) -> CSS
  2. CSS or Sass file -> External file -> className prop -> Entire app (global, problematic) -> CSS
  3. CSS Modules -> One external file per component -> className prop -> Component -> CSS
  4. CSS-in-JS -> External file or component file -> Creates new component -> Component -> JavaScript
  5. Utility-first CSS (ex: tailwindcss) -> JSX elements -> className prop -> JSX element -> CSS

  Alternative to styling with CSS: UI libraries like MUI, Chakra UI, Mantine, etc.

>:---------------------------------:<
215. Storing State in the URL

> The URL is an excellent place to store UI state and an alternative to useState in some situations.
  1. Easy way to store state in a global place, accessible to all components in the app
  2. Good way to 'pass' data from one page into the next page
  3. Makes it possible to bookmark and share the page with the exact UI state it had at the time

>:---------------------------------:<
222. What is the Context API?

Task: Passing state into multiple deeply nested child components
  Solution 1: Passing props. PROBLEM: PROP DRILLING
  Solution 2: Context API

Context API:
  > System to pass data throughout the app without manually passing props down the tree
  > Allows us to "broadcast" global state to the entire app
    1. Provider: gives all child components access to value (Top of the tree, App)
    2. 'value': data that we want to make available (usually state and functions)
    3. Consumers: all components that read the provided context value
  
  'value' is updated -> Providers notifies the consumers that the value changed and all consumers re-render

>:---------------------------------:<
226. Thinking In React: Advanced State Management

Review: State management: Giving each piece of state the right home
  > When to use state
  > Types of state (accessibility): local vs. global

This lecture:
  > Types of state (domain): UI vs. remote
  > Where to place each piece of state
  > Tools to manage all types of state

TYPES OF STATE:
  1. State Accessibility
  ("If this component was rendered twice, should a state update in one of them reflect in the other one?"): No, local. Yes, global.
    > Local state
      - Needed only by one of few components
      - Only accessible in component and child components
    > Global state
      - Might be needed by many components
      - Accessible to every component in the app

  2. State Domain
    > Remote state
      - All app data loaded from a remote server (API)
      - Usually asynchronous
      - Needs re-fetching + updating
    > UI state 
      - Everything else
      - Theme, list filters, form data, etc.
      - Usually synchronous and stored in the app
  
  STATE PLACEMENT OPTIONS (Where to place state?):
    >>> Type | Tools | Where to use?
    > Local component: useState, useReducer, useRef | Local state
    > Parent component: useState, useReducer, useRef | Lifting up state
    > Context: Context API + useState or useReducer | Global state (preferably UI State)
    > 3rd-party library: Redux, React Query, SWR, Zustand, etc. | Global state (remote or UI)
    > URL: React Router | Global state, passing between pages
    > Browser: Local storage, session storage, etc. | Storing data in user's browser

  STATE MANAGEMENT TOOL OPTIONS
    > Local + UI: useState; useReducer; useRef
    > Local + Remote: fetch + useEffect + useState/useReducer (Mostly in small apps)
    > Global + UI: Context API + useState/useReducer; Redux, Zustand, Recoil, etc.; React Router
    > Global + Remote: Context API + useState/useReducer; Redux, Zustand, Recoil, etc.; Tools highly specialized in handling remote state: React Query, SWR, RTK Query

>:---------------------------------:<
243. Performance Optimization and Wasted Renders
  1. PREVENT WASTED RENDERS
    > memo
    > useMemo
    > useCallback
    > Passing elements as children or regular props
  2. IMPROVE APP SPEED/RESPONSIVENESS
    > useMemo
    > useCallback
    > useTransition
  3. REDUCE BUNDLE SIZE
    > Using fewer 3rd-party packages
    > Code splitting and lazy loading

  WHEN DOES A COMPONENT INSTANCE RE-RENDER?
    > A component instance only gets re-rendered in 3 different situations:
      1. State changes
      2. Context changes
      3. Parent re-renders
    - A render does not mean that the DOM actually gets updated, it just means the component function gets called. But this can be an expensive operation
    - A wasted render is a render that didn't produce any change in the DOM (Usually not a problem, as React is very fast)
    - Only a problem when the happen too frequently or when the component is very slow

>:---------------------------------:<
246. Understanding memo
  > Memoization: optimization technique that executes a pure function once, and saves the result in memory. If we try to execute the function again with the same arguments as before, the previously saved result will be returned, without executing the function again.
    - Memoize components with `memo`
    - Memoize objects with `useMemo`
    - Memoize functions with `useCallback`

    1. Prevent wasted renders
    2. Improve app speed/responsiveness
  
  THE `memo` FUNCTION
    > Used to screate a component that will not re-render when its parent re-renders, as long as the props stay the same between renders
    > Only affects props! A memoized component will still re-render when its own state changes or when a context that it's subscribed to changes
    > Only makes sense when the component is heavy (slow rendering), re-renders often and does so with the same props

    - Regular behavior (no `memo`): Components re-render -> Child re-renders
    - Memoized child with `memo`: Components re-render -> Same props -> Memoized child does NOT re-render. New props -> Memoized child re-renders

>:---------------------------------:<
248. Understanding useMemo and useCallback
  > In React, everything is re-created on every render (including objects and functions) ->
    In JavaScript, two objects or functions that look the same, *are actually different* ({} != {}) ->
    If objects or functions are passed as props, the child component will always see them as *new props on each re-render* ->
    If props are different between re-renders, `memo` *will not work* -> (SOLUTION) ->
    We need to memoize objects and functions, to make them stable (preserve) between re-renders (memoized {} == memoized {})

  > TWO NEW HOOKS, useMemo and useCallback
    - Used to memoize values (useMemo) and functions (useCallback) between renders
    - Values passed into useMemo and useCallback will be stored in memory ("cached") and returned in subsequent re-renders, as long as dependencies ("inputs") stay the same
    - useMemo and useCallback have a dependency array (like useEffect): whenever one dependency changes, the value will be re-created
    - Only use them for one of the three use cases! V

    THREE BIG USE CASES:
      1. Memoizing props to prevent wasted renders (together with memo)
      2. Memoizing values to avoid expensive re-calculations on every render
      3. Memoizing values that are used in a dependency array of another hook

>:---------------------------------:<
253. Optimizing Bundle Size With Code Splitting
  > Bundle: JavaScript file containing the entire application code. Downloading the bundle will load the entire app at once, turning it into a SPA
  > Bundle size: Amount of JavaScript users have to download to start using the app. One of the most important things to be optimized, so that the bundle takes less time to download
  > Code splitting: Splitting bundle into multiple parts that can be downloaded over time ("lazy loading")

>:---------------------------------:<
254. Don't Optimize Prematurely!
  > DO:
    - Find performance bottlenecks using the Profiler and visual inspection (laggy UI)
    - Fix those real performance issues
    - Memoize expensive re-renders
    - Memoize expensive calculations
    - Optimize context if it has many consumers and changes often
    - Memoize context value + child components
    - Implement code splitting + lazy loading for SPA routes

  > DON'T:
    - Don't optimize prematurely
    - Don't optimize anything if there is nothing to optimize...
    - Don't wrap all components in `memo()`
    - Don't wrap all values in `useMemo()`
    - Don't wrap all functions in `useCallback()`
    - Don't optimize context if it's not slow and doesn't have many consumers

>:---------------------------------:<
255. useEffect Rules and Best Practices
  > useEffect DEPENDENCY ARRAY RULES
    - Every state variable, prop, *and context value* used inside the effect MUST be included in the dependency array
    - All 'reactive values' must be included! That means any function or variable that reference any other reactive value
    (Reactive value: state, prop, or context value, or any other value that references a reactive value)
    - Dependencies choose themselves: NEVER ignore the exhaustive-deps ESLint rule!
    - Do NOT use objects or arrays as dependencies (objects are recreated on each render, and React sees new objects as different, {} !== {}) (These rules apply to the useMemo and useCallback hooks)

  > REMOVING UNNECESSARY DEPENDENCIES
    - Removing function dependencies
      1. Move function into the effect
      2. If you need the function in multiple places, memoize it (`useCallback`)
      3. If the function doesn't reference any reactive values, move it out of the component
    - Removing object dependencies
      1. Instead of including the entire object, include only the properties you need (primitive values)
      2. If that doesn't work, use the same strategies as for functions (moving or memoizing object)
    - Other strategies
      1. If you have multiple related reactive values as dependencies, try using a reducer (`useReducer`)
      2. You don't need to include `setState` (from useState) and `dispatch` (from `useReducer`) in the dependencies, as React guarantees them to be stable across renders
  
  > WHEN NOT TO USE AN EFFECT
    - Effects should be used as a last resort, when no other solution makes sense. React calls them an 'escape hatch' to step outside of React
    - THREE CASES WHERE EFFECTS ARE OVERUSED:
      1. Responding to a user event. An event handler function should be used instead
      2. Fecthing data on component mount. This is fine in small apps, but in real-world app, a library like React Query should be used
      3. Synchronizing state changes with one another (setting state based on another state variable). Try to use derived state and event handlers